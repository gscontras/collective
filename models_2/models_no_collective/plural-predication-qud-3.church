;; speaker rationality?
(define alpha 10)

;; Helper function
(define (power lst alpha) (map (lambda (x) (expt x alpha)) lst))

;; plural predication: 
;; take in the noise level and compute likelihood of collective interpretation for ambiguous utterance
(define plural-predication 
  (mem
   (lambda (noise QUD?)

     ;; QUDs for "move", "inspect", and null
     (define (QUD state)
        (case QUD?
          (('sum) (sum state))
          (('min) (apply min state))
          (('max) (apply max state))
          (('null) state)))

     ;;  Utterances and their costs
     (define utterances (list 'null 'amb 'collective 'distributive))
     (define (utterance-prior) (multinomial utterances '(3 2 1 1))) ;; check actual frequencies?

     ;;   Prior on the number of objects
     (define (number-of-objects-prior) (uniform-draw '(4)))

     ;;   Prior on object size
     (define object-prior '(
                            (575 1061 1600) ; box mean size plus 1st and 3rd quartile
                            (1  3  1)))

     ;; Prior on state
     (define (state-prior) (uniform-draw '( ; list of possible four object states
                                           (  575 575 575 575 )
                                            ( 575 575 575 1061  )
                                            ( 575 575 575 1600  )
                                            ( 575 575 1061  1061  )
                                            ( 575 575 1061  1600  )
                                            ( 575 575 1600  1600  )
                                            ( 575 1061  1061  1061  )
                                            ( 575 1061  1061  1600  )
                                            ( 575 1061  1600  1600  )
                                            ( 575 1600  1600  1600  )
                                            ( 1061  1061  1061  1061  )
                                            ( 1061  1061  1061  1600  )
                                            ( 1061  1061  1600  1600  )
                                            ( 1061  1600  1600  1600  )
                                            ( 1600  1600  1600  1600  )
                                           )))

     ;; Prior on theta
     (define (dist-theta-prior) (apply multinomial object-prior))
     (define (coll-theta-prior) ; possible summation of four objects
       (uniform-draw 
        '(
          2300
          2786
          3325
          3272
          3811
          4350
          3758
          4297
          4836
          5375
          4244
          4783
          5322
          5861
          6400
          )
        ))

     ;;  collective measurement noise
     (define noise-prior (case noise
                               (('low)
                                (lambda () (uniform-draw '(1) ))) ;; low
                               (('mid) 
                                (lambda () (multinomial '(.5 1 1.5) 
                                                        '(1 3 1)))) ;; middle
                               (('high)
                                (lambda () (uniform-draw '(.5 1 1.5) ))) ;; high
                               )) 

     ;; truth conditions
     (define collective-interpretation 
       (lambda (state coll-theta collective-noise) 
         (if
          (> (sum state) (* collective-noise coll-theta)) ; noise as multiplier
          (flip 0.95)
          (flip 0.05))))
     (define distributive-interpretation 
       (lambda (state dist-theta) 
        (if
         (all (map (lambda (d) (> d dist-theta)) state))
         (flip 0.95)
         (flip 0.05))))

     ;; meaning functions
     (define (meaning utterance state dist-theta coll-theta collective? collective-noise)
       (case utterance
             (('null)
              #t)
             (('amb)
              (if collective?
                  (collective-interpretation state coll-theta collective-noise)
                  (distributive-interpretation state dist-theta)))
             (('distributive)
              (distributive-interpretation state dist-theta))
             (('collecitve)
              (collective-interpretation state coll-theta collective-noise))))

     ;; Pragmatic listener
     (define prag-listener
       (mem
        (lambda (utterance)
          (enumeration-query
           (define number-of-objects (number-of-objects-prior))
           (define state (state-prior))
           (define collective? (case utterance 
                                     (('amb) (flip 0.2))))
           (define dist-theta (dist-theta-prior))
;           (define coll-theta (coll-theta-prior)) ; coll-theta independent
;           (define coll-theta dist-theta) ; coll-theta is the same as dist-theta
           (define coll-theta (* dist-theta number-of-objects)) ; coll-theta is dist-theta * number of objects
;;           (list collective? dist-theta coll-theta)
;           (list collective? (QUD state))
            collective?

           (condition (equal? (apply multinomial (speaker collective? state dist-theta coll-theta)) utterance))
           ))))

     ;; Speaker
     (define (speaker collective? state dist-theta coll-theta)
       (enumeration-query
        (define utterance (utterance-prior))
        (define listeners-world (apply multinomial 
                                       (list (first (listener utterance collective? dist-theta coll-theta
                                                              )) 
                                       (power (second (listener utterance collective? dist-theta coll-theta)) 
                                              alpha))))
        utterance
        (equal? listeners-world (QUD state))
        ))

     ;; Literal listener
     (define listener
       (mem
        (lambda (utterance collective? dist-theta coll-theta)
          (enumeration-query
           (define collective-noise (noise-prior))
           (define state (state-prior))
           (QUD state)
           (condition (meaning utterance state dist-theta coll-theta collective? collective-noise))
           ))))

     (prag-listener 'amb)

     )))

;; wrapper for the plural predication model
(define model
  (mem
  (lambda (noise 
            QUD?)
    (display (string-append "beginning model with noise=" noise " and QUD=" QUD?))
     (define likelihood 
          (plural-predication noise QUD?))
     (list  QUD? noise 
          likelihood))))

;; possible values for noise
(define noises '(low mid high))
(define QUDs '(null sum min max))


;; pair noise level with likelihood of collective interpretation for ambiguous utterance
(define data
  (map (lambda (QUD?)
    (map (lambda (noise)
      (display (model noise QUD?))
      (model noise QUD?))
       noises))
  QUDs))

(display data)

;(write-csv data "plural-predication-qud.csv")


;; RESULTS 
;(define coll-theta (coll-theta-prior)) ; coll-theta independent
;(((null low ((#f #t) (0.7076131730164109 0.29238682698358914))) 
;  (null mid ((#f #t) (0.7329196293630612 0.26708037063693874))) 
;  (null high ((#f #t) (0.7566950749462596 0.24330492505374038)))) 
; ((sum low ((#f #t) (0.7076131730164109 0.29238682698358914))) 
;  (sum mid ((#f #t) (0.7329196293630612 0.26708037063693874))) 
;  (sum high ((#f #t) (0.7566950749462596 0.24330492505374038)))) 
; ((min low ((#f #t) (0.6238999517683629 0.37610004823163706))) 
;  (min mid ((#f #t) (0.5831996468178957 0.41680035318210434))) 
;  (min high ((#f #t) (0.5891327409263263 0.41086725907367366)))) 
; ((max low ((#f #t) (0.8080429833634301 0.19195701663656992))) 
;  (max mid ((#f #t) (0.8144940567948271 0.18550594320517289))) 
;  (max high ((#f #t) (0.812575782246499 0.187424217753501)))))
;(define coll-theta dist-theta) ; coll-theta is the same as dist-theta
;(((null low ((#f #t) (0.6178287731699477 0.38217122683005234))) 
;  (null mid ((#f #t) (0.6187341745813458 0.3812658254186543))) 
;  (null high ((#f #t) (0.6190252765541243 0.38097472344587563)))) 
; ((sum low ((#f #t) (0.6178287731699477 0.38217122683005234))) 
;  (sum mid ((#f #t) (0.6187341745813458 0.3812658254186543))) 
;  (sum high ((#f #t) (0.6190252765541243 0.38097472344587563)))) 
; ((min low ((#f #t) (0.657578718472187 0.342421281527813))) 
;  (min mid ((#f #t) (0.6551486615391275 0.3448513384608725))) 
;  (min high ((#f #t) (0.653444646891918 0.3465553531080821)))) 
; ((max low ((#f #t) (0.7414221122253607 0.25857788777463914))) 
;  (max mid ((#f #t) (0.7439481526229872 0.2560518473770127))) 
;  (max high ((#f #t) (0.7443762926435347 0.2556237073564654)))))
;(define coll-theta (* dist-theta number-of-objects)) ; coll-theta is dist-theta * number of objects
;(((null low ((#f #t) (0.6580382827285264 0.3419617172714735))) 
;  (null mid ((#f #t) (0.687743773419957 0.31225622658004293))) 
;  (null high ((#f #t) (0.7340229284426448 0.26597707155735517)))) 
; ((sum low ((#f #t) (0.6580382827285264 0.3419617172714735))) 
;  (sum mid ((#f #t) (0.687743773419957 0.31225622658004293))) 
;  (sum high ((#f #t) (0.7340229284426448 0.26597707155735517)))) 
; ((min low ((#f #t) (0.6098714475144297 0.39012855248557027))) 
;  (min mid ((#f #t) (0.5927984008585391 0.407201599141461))) 
;  (min high ((#f #t) (0.6002708007028541 0.39972919929714584)))) 
; ((max low ((#f #t) (0.7838999524190104 0.2161000475809895))) 
;  (max mid ((#f #t) (0.8062732979530167 0.19372670204698333))) 
;  (max high ((#f #t) (0.8103216693689098 0.18967833063109016)))))

