;; speaker rationality?
(define alpha 10)

;; Helper function
(define (power lst alpha) (map (lambda (x) (expt x alpha)) lst))

;; plural predication: 
;; take in the noise level and compute likelihood of collective interpretation for ambiguous utterance
(define plural-predication 
  (mem
   (lambda (noise QUD?)

     ;; QUDs for "move", "inspect", and null
     (define (QUD state)
        (case QUD?
          (('sum) (sum state))
          (('min) (apply min state))
          (('max) (apply max state))
          (('null) state)))

     ;;  Utterances and their costs
     (define utterances (list 'null 'amb 'collective 'distributive))
     (define (utterance-prior) (multinomial utterances '(3 2 1 1))) ;; check actual frequencies?

     ;;   Prior on the number of objects
     (define (number-of-objects-prior) (uniform-draw '(4)))

     ;;   Prior on object size
     (define object-prior '(
                            (575 818 1061 1331 1600) ; box mean size plus 1st and 3rd quartile
                            (0.5 2 3 2 0.5)))

     ;; Prior on state
     (define (state-prior) (uniform-draw '( ; list of possible four object states
                                           (  575 575 575 575 )
                                            ( 575 575 575 818 )
                                            ( 575 575 575 1061  )
                                            ( 575 575 818 818 )
                                            ( 575 575 818 1061  )
                                            ( 575 818 818 818 )
                                            ( 575 575 575 1331  )
                                            ( 575 575 1061  1061  )
                                            ( 575 818 818 1061  )
                                            ( 818 818 818 818 )
                                            ( 575 575 818 1331  )
                                            ( 575 575 575 1600  )
                                            ( 575 818 1061  1061  )
                                            ( 818 818 818 1061  )
                                            ( 575 575 1061  1331  )
                                            ( 575 818 818 1331  )
                                            ( 575 575 818 1600  )
                                            ( 575 1061  1061  1061  )
                                            ( 818 818 1061  1061  )
                                            ( 575 818 1061  1331  )
                                            ( 818 818 818 1331  )
                                            ( 575 575 1061  1600  )
                                            ( 575 818 818 1600  )
                                            ( 575 575 1331  1331  )
                                            ( 818 1061  1061  1061  )
                                            ( 575 1061  1061  1331  )
                                            ( 818 818 1061  1331  )
                                            ( 575 818 1061  1600  )
                                            ( 818 818 818 1600  )
                                            ( 575 818 1331  1331  )
                                            ( 575 575 1331  1600  )
                                            ( 1061  1061  1061  1061  )
                                            ( 818 1061  1061  1331  )
                                            ( 575 1061  1061  1600  )
                                            ( 818 818 1061  1600  )
                                            ( 575 1061  1331  1331  )
                                            ( 818 818 1331  1331  )
                                            ( 575 818 1331  1600  )
                                            ( 575 575 1600  1600  )
                                            ( 1061  1061  1061  1331  )
                                            ( 818 1061  1061  1600  )
                                            ( 818 1061  1331  1331  )
                                            ( 575 1061  1331  1600  )
                                            ( 818 818 1331  1600  )
                                            ( 575 1331  1331  1331  )
                                            ( 575 818 1600  1600  )
                                            ( 1061  1061  1061  1600  )
                                            ( 1061  1061  1331  1331  )
                                            ( 818 1061  1331  1600  )
                                            ( 818 1331  1331  1331  )
                                            ( 575 1061  1600  1600  )
                                            ( 818 818 1600  1600  )
                                            ( 575 1331  1331  1600  )
                                            ( 1061  1061  1331  1600  )
                                            ( 1061  1331  1331  1331  )
                                            ( 818 1061  1600  1600  )
                                            ( 818 1331  1331  1600  )
                                            ( 575 1331  1600  1600  )
                                            ( 1061  1061  1600  1600  )
                                            ( 1061  1331  1331  1600  )
                                            ( 1331  1331  1331  1331  )
                                            ( 818 1331  1600  1600  )
                                            ( 575 1600  1600  1600  )
                                            ( 1061  1331  1600  1600  )
                                            ( 1331  1331  1331  1600  )
                                            ( 818 1600  1600  1600  )
                                            ( 1061  1600  1600  1600  )
                                            ( 1331  1331  1600  1600  )
                                            ( 1331  1600  1600  1600  )
                                            ( 1600  1600  1600  1600  )
                                           )))

     ;; Prior on theta
     (define (dist-theta-prior) (apply multinomial object-prior))
     (define (coll-theta-prior) ; possible summation of four objects
       (uniform-draw 
        '(
          2300
          2543
          2786
          2786
          3029
          3029
          3056
          3272
          3272
          3272
          3299
          3325
          3515
          3515
          3542
          3542
          3568
          3758
          3758
          3785
          3785
          3811
          3811
          3812
          4001
          4028
          4028
          4054
          4054
          4055
          4081
          4244
          4271
          4297
          4297
          4298
          4298
          4324
          4350
          4514
          4540
          4541
          4567
          4567
          4568
          4593
          4783
          4784
          4810
          4811
          4836
          4836
          4837
          5053
          5054
          5079
          5080
          5106
          5322
          5323
          5324
          5349
          5375
          5592
          5593
          5618
          5861
          5862
          6131
          6400
          )
        ))

     ;;  collective measurement noise
     (define noise-prior (case noise
                               (('low)
                                (lambda () (uniform-draw '(1) ))) ;; low
                               (('mid) 
                                (lambda () (multinomial '(.5 1 1.5) 
                                                        '(1 3 1)))) ;; middle
                               (('high)
                                (lambda () (uniform-draw '(.5 1 1.5) ))) ;; high
                               )) 

     ;; truth conditions
     (define collective-interpretation 
       (lambda (state coll-theta collective-noise) 
         (if
          (> (sum state) (* collective-noise coll-theta)) ; noise as multiplier
          (flip 0.95)
          (flip 0.05))))
     (define distributive-interpretation 
       (lambda (state dist-theta) 
        (if
         (all (map (lambda (d) (> d dist-theta)) state))
         (flip 0.95)
         (flip 0.05))))

     ;; meaning functions
     (define (meaning utterance state dist-theta coll-theta collective? collective-noise)
       (case utterance
             (('null)
              #t)
             (('amb)
              (if collective?
                  (collective-interpretation state coll-theta collective-noise)
                  (distributive-interpretation state dist-theta)))
             (('distributive)
              (distributive-interpretation state dist-theta))
             (('collecitve)
              (collective-interpretation state coll-theta collective-noise))))

     ;; Pragmatic listener
     (define prag-listener
       (mem
        (lambda (utterance)
          (enumeration-query
           (define number-of-objects (number-of-objects-prior))
           (define state (state-prior))
           (define collective? (case utterance 
                                     (('amb) (flip 0.2))))
           (define dist-theta (dist-theta-prior))
           ;;(define coll-theta (coll-theta-prior)) ; coll-theta independent
;;           (define coll-theta dist-theta) ; coll-theta is the same as dist-theta
           (define coll-theta (* dist-theta number-of-objects))
;;           (list collective? dist-theta coll-theta)
;           (list collective? (QUD state))
            collective?

           (condition (equal? (apply multinomial (speaker collective? state dist-theta coll-theta)) utterance))
           ))))

     ;; Speaker
     (define (speaker collective? state dist-theta coll-theta)
       (enumeration-query
        (define utterance (utterance-prior))
        (define listeners-world (apply multinomial 
                                       (list (first (listener utterance collective? dist-theta coll-theta
                                                              )) 
                                       (power (second (listener utterance collective? dist-theta coll-theta)) 
                                              alpha))))
        utterance
        (equal? listeners-world (QUD state))
        ))

     ;; Literal listener
     (define listener
       (mem
        (lambda (utterance collective? dist-theta coll-theta)
          (enumeration-query
           (define collective-noise (noise-prior))
           (define state (state-prior))
           (QUD state)
           (condition (meaning utterance state dist-theta coll-theta collective? collective-noise))
           ))))

     (prag-listener 'amb)

     )))

;; wrapper for the plural predication model
(define model
  (mem
  (lambda (noise 
            QUD?)
    (display (string-append "beginning model with noise=" noise " and QUD=" QUD?))
     (define likelihood 
          (plural-predication noise QUD?))
     (list  QUD? noise 
          likelihood))))

;; possible values for noise
(define noises '(low mid high))
(define QUDs '(null sum min max))


;; pair noise level with likelihood of collective interpretation for ambiguous utterance
(define data
  (map (lambda (QUD?)
    (map (lambda (noise)
      (display (model noise QUD?))
      (model noise QUD?))
       noises))
  QUDs))

(display data)

;(write-csv data "plural-predication-qud.csv")


;; RESULTS 
; coll-theta is the same as dist-theta (define coll-theta dist-theta)
;(((null low ((#f #t) (0.4715739509458837 0.5284260490541162))) 
;  (null mid ((#f #t) (0.4716223863048855 0.5283776136951145))) 
;  (null high ((#f #t) (0.4716371963005939 0.528362803699406)))) 
; ((sum low ((#f #t) (0.5316796758582986 0.46832032414170144))) 
;  (sum mid ((#f #t) (0.5318541839297624 0.4681458160702376))) 
;  (sum high ((#f #t) (0.531883662193985 0.4681163378060151)))) 
; ((min low ((#f #t) (0.6830165485686024 0.3169834514313977))) 
;  (min mid ((#f #t) (0.6827716801042913 0.3172283198957086))) 
;  (min high ((#f #t) (0.6826055193200319 0.317394480679968)))) 
; ((max low ((#f #t) (0.6703101739842857 0.3296898260157143))) 
;  (max mid ((#f #t) (0.6704598467221303 0.3295401532778697))) 
;  (max high ((#f #t) (0.6704851207564732 0.3295148792435268)))))
; coll-theta is dist-theta * number of objects (define coll-theta (* dist-theta number-of-objects))
;(((null low ((#f #t) (0.5692169191842862 0.43078308081571387))) 
;  (null mid ((#f #t) (0.5986664512074298 0.4013335487925702))) 
;  (null high ((#f #t) (0.6481719449871597 0.35182805501284026)))) 
; ((sum low ((#f #t) (0.527669803920334 0.472330196079666))) 
;  (sum mid ((#f #t) (0.5166794413198029 0.48332055868019713))) 
;  (sum high ((#f #t) (0.4671549513014416 0.5328450486985584)))) 
; ((min low ((#f #t) (0.6069626294590925 0.39303737054090754))) 
;  (min mid ((#f #t) (0.5789697448676591 0.42103025513234094))) 
;  (min high ((#f #t) (0.5942582203026464 0.40574177969735364)))) 
; ((max low ((#f #t) (0.7781766261683568 0.22182337383164313))) 
;  (max mid ((#f #t) (0.7881402349992142 0.21185976500078585))) 
;  (max high ((#f #t) (0.7802801987236678 0.2197198012763321)))))

