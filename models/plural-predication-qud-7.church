;; speaker rationality?
(define alpha 20)

;; Helper function
(define (power lst alpha) (map (lambda (x) (expt x alpha)) lst))

;; plural predication: 
;; take in the noise level and compute likelihood of collective interpretation for ambiguous utterance
(define plural-predication 
  (mem
   (lambda (noise)

     (define QUDs (list 'null 'sum))
     (define (QUD-prior) (multinomial QUDs '(1 3)))

     ;; QUDs for "move", "inspect", and null
     (define (QUD state QUD?)
        (case QUD?
          (('sum) (sum state))
          (('min) (apply min state))
          (('max) (apply max state))
          (('null) state)))

     ;;  Utterances and their costs
     (define utterances (list 'null 'amb 'collective 'distributive))
     (define (utterance-prior) (multinomial utterances '(4 3 1 2))) ;; check actual frequencies?

     ;;   Prior on the number of objects
     (define (number-of-objects-prior) (uniform-draw '(4)))

     ;;   Prior on object size
     (define object-prior '(
                            (575 818 1061 1331 1600) ; box mean size plus 1st and 3rd quartile
                            (1 1 1 1 1)))

     ;; Prior on state
     (define (state-prior) (uniform-draw '( ; list of possible four object states
                                           (  575 575 575 575 )
                                            ( 575 575 575 818 )
                                            ( 575 575 575 1061  )
                                            ( 575 575 818 818 )
                                            ( 575 575 818 1061  )
                                            ( 575 818 818 818 )
                                            ( 575 575 575 1331  )
                                            ( 575 575 1061  1061  )
                                            ( 575 818 818 1061  )
                                            ( 818 818 818 818 )
                                            ( 575 575 818 1331  )
                                            ( 575 575 575 1600  )
                                            ( 575 818 1061  1061  )
                                            ( 818 818 818 1061  )
                                            ( 575 575 1061  1331  )
                                            ( 575 818 818 1331  )
                                            ( 575 575 818 1600  )
                                            ( 575 1061  1061  1061  )
                                            ( 818 818 1061  1061  )
                                            ( 575 818 1061  1331  )
                                            ( 818 818 818 1331  )
                                            ( 575 575 1061  1600  )
                                            ( 575 818 818 1600  )
                                            ( 575 575 1331  1331  )
                                            ( 818 1061  1061  1061  )
                                            ( 575 1061  1061  1331  )
                                            ( 818 818 1061  1331  )
                                            ( 575 818 1061  1600  )
                                            ( 818 818 818 1600  )
                                            ( 575 818 1331  1331  )
                                            ( 575 575 1331  1600  )
                                            ( 1061  1061  1061  1061  )
                                            ( 818 1061  1061  1331  )
                                            ( 575 1061  1061  1600  )
                                            ( 818 818 1061  1600  )
                                            ( 575 1061  1331  1331  )
                                            ( 818 818 1331  1331  )
                                            ( 575 818 1331  1600  )
                                            ( 575 575 1600  1600  )
                                            ( 1061  1061  1061  1331  )
                                            ( 818 1061  1061  1600  )
                                            ( 818 1061  1331  1331  )
                                            ( 575 1061  1331  1600  )
                                            ( 818 818 1331  1600  )
                                            ( 575 1331  1331  1331  )
                                            ( 575 818 1600  1600  )
                                            ( 1061  1061  1061  1600  )
                                            ( 1061  1061  1331  1331  )
                                            ( 818 1061  1331  1600  )
                                            ( 818 1331  1331  1331  )
                                            ( 575 1061  1600  1600  )
                                            ( 818 818 1600  1600  )
                                            ( 575 1331  1331  1600  )
                                            ( 1061  1061  1331  1600  )
                                            ( 1061  1331  1331  1331  )
                                            ( 818 1061  1600  1600  )
                                            ( 818 1331  1331  1600  )
                                            ( 575 1331  1600  1600  )
                                            ( 1061  1061  1600  1600  )
                                            ( 1061  1331  1331  1600  )
                                            ( 1331  1331  1331  1331  )
                                            ( 818 1331  1600  1600  )
                                            ( 575 1600  1600  1600  )
                                            ( 1061  1331  1600  1600  )
                                            ( 1331  1331  1331  1600  )
                                            ( 818 1600  1600  1600  )
                                            ( 1061  1600  1600  1600  )
                                            ( 1331  1331  1600  1600  )
                                            ( 1331  1600  1600  1600  )
                                            ( 1600  1600  1600  1600  )
                                           )))

     ;; Prior on theta
     (define (dist-theta-prior) (apply multinomial object-prior))
     (define (coll-theta-prior) ; possible summation of four objects
       (uniform-draw 
        '(
          2300
          2543
          2786
          2786
          3029
          3029
          3056
          3272
          3272
          3272
          3299
          3325
          3515
          3515
          3542
          3542
          3568
          3758
          3758
          3785
          3785
          3811
          3811
          3812
          4001
          4028
          4028
          4054
          4054
          4055
          4081
          4244
          4271
          4297
          4297
          4298
          4298
          4324
          4350
          4514
          4540
          4541
          4567
          4567
          4568
          4593
          4783
          4784
          4810
          4811
          4836
          4836
          4837
          5053
          5054
          5079
          5080
          5106
          5322
          5323
          5324
          5349
          5375
          5592
          5593
          5618
          5861
          5862
          6131
          6400
          )
        ))

     ;;  collective measurement noise
     (define noise-prior (case noise
                               (('low)
                                (lambda () (multinomial '(.5 1 1.5) 
                                                        '(1 6 1)))) ;; low
                               (('mid) 
                                (lambda () (multinomial '(.5 1 1.5) 
                                                        '(1 3 1)))) ;; middle
                               (('high)
                                (lambda () (multinomial '(.5 1 1.5) 
                                                        '(1 1 1)))) ;; high
                               )) 

     ;; truth conditions
     (define collective-interpretation 
       (lambda (state coll-theta collective-noise) 
         (if
          (> (sum state) (* collective-noise coll-theta)) ; noise as multiplier
          (flip 0.95)
          (flip 0.05))))
     (define distributive-interpretation 
       (lambda (state dist-theta) 
        (if
         (all (map (lambda (d) (> d dist-theta)) state))
         (flip 0.95)
         (flip 0.05))))

     ;; meaning functions
     (define (meaning utterance state dist-theta coll-theta collective? collective-noise)
       (case utterance
             (('null)
              #t)
             (('amb)
              (if collective?
                  (collective-interpretation state coll-theta collective-noise)
                  (distributive-interpretation state dist-theta)))
             (('distributive)
              (distributive-interpretation state dist-theta))
             (('collecitve)
              (collective-interpretation state coll-theta collective-noise))))

     ;; Pragmatic listener
     (define prag-listener
       (mem
        (lambda (utterance)
          (enumeration-query
           ;(define number-of-objects (number-of-objects-prior))
           (define state (state-prior))
           (define QUD? (QUD-prior))
           (define collective? (case utterance 
                                     (('amb) (flip 0.2))))
           (define dist-theta (dist-theta-prior))
           (define coll-theta (coll-theta-prior)) ; coll-theta independent
;           (define coll-theta dist-theta) ; coll-theta is the same as dist-theta
;           (define coll-theta (* dist-theta number-of-objects)) ; coll-theta is dist-theta * number of objects
;;           (list collective? dist-theta coll-theta)
;           (list collective? (QUD state))
;           (list QUD? collective?)
           collective?

           (condition (equal? (apply multinomial (speaker collective? state dist-theta coll-theta QUD?)) utterance))
           ))))

     ;; Speaker
     (define (speaker collective? state dist-theta coll-theta QUD?)
       (enumeration-query
        (define utterance (utterance-prior))
        (define listeners-world (apply multinomial 
                                       (list (first (listener utterance collective? dist-theta coll-theta QUD?
                                                              )) 
                                       (power (second (listener utterance collective? dist-theta coll-theta QUD?)) 
                                              alpha))))
        utterance
        (equal? listeners-world (QUD state QUD?))
        ))

     ;; Literal listener
     (define listener
       (mem
        (lambda (utterance collective? dist-theta coll-theta QUD?)
          (enumeration-query
           (define collective-noise (noise-prior))
           (define state (state-prior))
           (QUD state QUD?)
           (condition (meaning utterance state dist-theta coll-theta collective? collective-noise))
           ))))

     (prag-listener 'amb)

     )))

;; wrapper for the plural predication model
(define model
  (mem
  (lambda (noise)
    (display (string-append "beginning model with noise=" noise))
     (define likelihood 
          (plural-predication noise))
     (list  noise 
          likelihood))))

;; possible values for noise
(define noises '(low mid high))



;; pair noise level with likelihood of collective interpretation for ambiguous utterance
(define data
  (apply append
    (map (lambda (noise)
      (model noise))
       noises)))

(display data)

;(write-csv data "plural-predication-qud.csv")


;; RESULTS 
; alpha 20
;     (define QUDs (list 'null 'max))
;     (define (QUD-prior) (multinomial QUDs '(1 3)))
;(low ((#f #t) (0.8025561219368401 0.19744387806315997)) 
; mid ((#f #t) (0.8120610563641203 0.1879389436358797)) 
; high ((#f #t) (0.8164695978996752 0.18353040210032473)))
; alpha 20
;     (define QUDs (list 'null 'sum))
;     (define (QUD-prior) (multinomial QUDs '(1 3)))
;(low ((#f #t) (0.6738414589664034 0.32615854103359665)) 
; mid ((#f #t) (0.6768778615634794 0.32312213843652066)) 
; high ((#f #t) (0.6512044258839275 0.3487955741160726)))
; alpha 30
;     (define QUDs (list 'null 'sum))
;     (define (QUD-prior) (multinomial QUDs '(1 3)))
;(low ((#f #t) (0.6773965710948329 0.3226034289051671)) 
; mid ((#f #t) (0.6811853591595475 0.3188146408404525)) 
; high ((#f #t) (0.651978923670461 0.348021076329539)))
; alpha 20
;     (define QUDs (list 'null 'min))
;     (define (QUD-prior) (multinomial QUDs '(1 3)))
;(low ((#f #t) (0.6392540322661868 0.3607459677338133)) 
; mid ((#f #t) (0.6458683889263236 0.3541316110736764)) 
; high ((#f #t) (0.6599679705066318 0.3400320294933681)))
; alpha 20
;     (define QUDs (list 'null 'sum))
;     (define (QUD-prior) (multinomial QUDs '(1 3)))
;(('high)
;  (lambda () (multinomial '(.5 1 1.5) 
;                          '(1 1.5 1))))
;(low ((#f #t) (0.6738414589664034 0.32615854103359665)) 
; mid ((#f #t) (0.6768778615634794 0.32312213843652066)) 
; high ((#f #t) (0.6493939053773434 0.35060609462265657)))


