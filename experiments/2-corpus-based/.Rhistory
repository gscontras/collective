setwd("/Users/Greg/Documents/git/CoCoLab/collective/presentation/2015_Berkeley/")
setwd("/Users/Greg/Documents/git/CoCoLab/collective/presentations/2015_Berkeley/")
ggsave("noise-all.pdf")
ggsave("noise-all.pdf",height=6)
ggsave("noise-all.pdf",height=6,width=9)
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,1)
labs(color="")+
theme_blackDisplay()
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.75)+
labs(color="")+
theme_blackDisplay()
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.8)+
labs(color="")+
theme_blackDisplay()
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-all-zoom.pdf",height=6,width=9)
ggplot(d[d$noise=="no"|d$noise=="low",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggplot(d[d$noise=="no"], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
labs(color="")+
theme_blackDisplay()
ggplot(d[d$noise=="no",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
labs(color="")+
theme_blackDisplay()
ggsave("noise-no.pdf",height=6,width=9)
ggplot(d[d$noise=="no"|d$noise=="low",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-low.pdf",height=6,width=9)
ggplot(d[d$noise!="high",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-mid.pdf",height=6,width=9)
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-all.pdf",height=6,width=9)
d$noise = factor(d$noise,levels=c("no","low","mid","high"))
ggplot(d[d$noise=="no",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
labs(color="")+
theme_blackDisplay()
ggsave("noise-no.pdf",height=6,width=9)
ggplot(d[d$noise=="no"|d$noise=="low",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-low.pdf",height=6,width=9)
ggplot(d[d$noise!="high",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-mid.pdf",height=6,width=9)
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=1)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-all.pdf",height=6,width=9)
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-all.pdf",height=6,width=9)
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=3)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-all.pdf",height=6,width=9)
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=3.5)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-all.pdf",height=6,width=9)
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-all.pdf",height=6,width=9)
ggplot(d[d$noise=="no",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
ylab("probability density\n")+
labs(color="")+
theme_blackDisplay()
ggsave("noise-no.pdf",height=6,width=9)
ggplot(d[d$noise=="no"|d$noise=="low",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-low.pdf",height=6,width=9)
ggplot(d[d$noise!="high",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-mid.pdf",height=6,width=9)
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
ylab("probability density\n")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggsave("noise-all.pdf",height=6,width=9)
ggplot(d[d$noise=="no",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
#xlab("\nnoise")+
ylab("probability density\n")+
labs(color="")+
scale_x_discrete(breaks=NULL)+
theme_blackDisplay()
ggplot(d[d$noise=="no",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
ylab("")+
labs(color="")+
scale_y_discrete(breaks=NULL)+
theme_blackDisplay()
ggplot(d[d$noise=="no"|d$noise=="low",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
ylab("")+
scale_y_discrete(breaks=NULL)+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()
ggplot(d[d$noise=="no",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
labs(color="")+
ylab("")+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())
theme_blackDisplay()
ggplot(d[d$noise=="no",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
labs(color="")+
ylab("")+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())+
theme_blackDisplay()
ggplot(d[d$noise=="no",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
labs(color="")+
ylab("")+
theme_blackDisplay()+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())
ggplot(d[d$noise=="no",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
labs(color="")+
ylab("")+
theme_blackDisplay()+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())
ggsave("noise-no.pdf",height=6,width=9)
ggplot(d[d$noise=="no"|d$noise=="low",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
ylab("")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())
ggsave("noise-low.pdf",height=6,width=9)
ggplot(d[d$noise!="high",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
ylab("")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())
ggsave("noise-mid.pdf",height=6,width=9)
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
ylab("")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())
ggsave("noise-all.pdf",height=6,width=9)
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
scale_x_continuous(breaks=NULL)+
ylab("")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())
ggplot(d[d$noise=="no",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
labs(color="")+
ylab("")+
theme_blackDisplay()+
scale_color_manual(values=c("#F45E5B", "#5187FF","#17B32B","#9fb317"))
theme(axis.ticks = element_blank(), axis.text.y = element_blank())
ggplot(d[d$noise=="no",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
labs(color="")+
ylab("")+
theme_blackDisplay()+
scale_color_manual(values=c("#F45E5B", "#5187FF","#17B32B","#9fb317"))+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())
ggplot(d, aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
ylab("")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()+
scale_color_manual(values=c("#F45E5B", "#5187FF","#17B32B","#9fb317"))+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())
ggsave("noise-all.pdf",height=6,width=9)
ggplot(d[d$noise!="high",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
ylab("")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()+
scale_color_manual(values=c("#F45E5B", "#5187FF","#17B32B","#9fb317"))+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())
ggsave("noise-mid.pdf",height=6,width=9)
ggplot(d[d$noise=="no"|d$noise=="low",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
ylab("")+
ylim(0,.6)+
labs(color="")+
theme_blackDisplay()+
scale_color_manual(values=c("#F45E5B", "#5187FF","#17B32B","#9fb317"))+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())
ggsave("noise-low.pdf",height=6,width=9)
ggplot(d[d$noise=="no",], aes(x=x,y=hx)) +
geom_line(aes(color=noise,fill=noise),size=2.5)+
xlab("\nnoise")+
labs(color="")+
ylab("")+
theme_blackDisplay()+
scale_color_manual(values=c("#F45E5B", "#5187FF","#17B32B","#9fb317"))+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())
ggsave("noise-no.pdf",height=6,width=9)
## general plots
setwd("~/Documents/git/cocolab/collective/model/")
d = read.csv("plural-predication-add.csv",header=F)
colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","p")
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","p")
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","obj4","p")
head(d)
d$noise <-factor(d$noise,levels=c("no","low",'mid','high'))
d$noise <-factor(d$noise,labels=c("no\n(\u03c3=0.02)","low\n(\u03c3=1)",'mid\n(\u03c3=2)','high\n(\u03c3=3)'))
#d$pred = as.character(lapply(strsplit(as.character(d$noise), split="-"), "[", 1))
#d$variability= as.character(lapply(strsplit(as.character(d$noise), split="-"), "[", 2))
#d$k <-factor(d$knowledge,labels=c("partial","full"))
d$numobjs <- factor(d$numobjs)
d$state = paste(d$obj1,d$obj2)
#d$state = paste(d$obj1,d$obj2,d$obj3)
#d$state = paste(d$obj1,d$obj2,d$obj3,d$obj4)
setwd("~/Documents/git/cocolab/collective/model/")
d = read.csv("plural-predication-sum.csv",header=F)
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","p")
colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","p")
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","obj4","p")
head(d)
d$noise <-factor(d$noise,levels=c("high","mid",'low','no'))
#d$k <-factor(d$knowledge,labels=c("partial","full"))
d$numobjs <- factor(d$numobjs)
#d$state = paste(d$obj1,d$obj2)
d$state = paste(d$obj1,d$obj2,d$obj3)
#d$state = paste(d$obj1,d$obj2,d$obj3,d$obj4)
d$state <- factor(d$state)
#d$KL <- factor(d$KL)
d$p <- as.numeric(as.character(d$p))
d$k = "sum"
d[d$knowledge=="true",]$k = "full"
head(d)
d$noise <-factor(d$noise,levels=c("no","low",'mid','high'))
d$noise <-factor(d$noise,labels=c("no\n(\u03c3=0.01)","low\n(\u03c3=0.75)",'mid\n(\u03c3=1)','high\n(\u03c3=1.25)'))
# check effect direction for inferred thetas
agg <- aggregate(p~noise*k,d[d$collective=="true",],sum)
p <- ggplot(agg,aes(x=noise,y=p)) +
geom_bar(stat='identity',position=position_dodge(),aes(fill=k)) +
ylab("probability of\ncollective interpretation\n") +
xlab("\ncollective interpretation noise")+
labs(fill="speaker\nknowledge\naccess")+
scale_fill_manual(values=c("red", "blue"))+
theme(axis.text.x = element_text(size=10,angle=0))+
theme_bw()
#facet_grid(dist_theta~coll_theta)
p
setwd("~/Documents/git/cocolab/collective/model/")
d = read.csv("plural-predication-sum.csv",header=F)
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","p")
colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","p")
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","obj4","p")
head(d)
d$noise <-factor(d$noise,levels=c("high","mid",'low','no'))
#d$k <-factor(d$knowledge,labels=c("partial","full"))
d$numobjs <- factor(d$numobjs)
#d$state = paste(d$obj1,d$obj2)
d$state = paste(d$obj1,d$obj2,d$obj3)
#d$state = paste(d$obj1,d$obj2,d$obj3,d$obj4)
d$state <- factor(d$state)
#d$KL <- factor(d$KL)
d$p <- as.numeric(as.character(d$p))
d$k = "sum"
d[d$knowledge=="true",]$k = "full"
head(d)
d$noise <-factor(d$noise,levels=c("no","low",'mid','high'))
d$noise <-factor(d$noise,labels=c("no\n(\u03c3=0.01)","low\n(\u03c3=0.75)",'mid\n(\u03c3=1)','high\n(\u03c3=1.25)'))
agg <- aggregate(p~noise*k,d[d$collective=="true",],sum)
p <- ggplot(agg,aes(x=noise,y=p)) +
geom_bar(stat='identity',position=position_dodge(),aes(fill=k)) +
ylab("probability of\ncollective interpretation\n") +
xlab("\ncollective interpretation noise")+
labs(fill="speaker\nknowledge\naccess")+
scale_fill_manual(values=c("red", "blue"))+
theme(axis.text.x = element_text(size=10,angle=0))+
theme_bw()
#facet_grid(dist_theta~coll_theta)
p
p <- ggplot(agg,aes(x=noise,y=p)) +
geom_bar(stat='identity',position=position_dodge(),aes(fill=k)) +
ylab("probability of\ncollective interpretation\n") +
xlab("\ncollective interpretation noise")+
labs(fill="speaker\nknowledge\naccess")+
scale_fill_manual(values=c("red", "blue"))+
theme(axis.text.x = element_text(size=10,angle=0))+
theme_blackDisplay()
#facet_grid(dist_theta~coll_theta)
p
p <- ggplot(agg,aes(x=noise,y=p)) +
geom_bar(stat='identity',position=position_dodge(),aes(fill=k)) +
ylab("probability of\ncollective interpretation\n") +
xlab("\ncollective interpretation noise")+
labs(fill="speaker\nknowledge\naccess")+
#scale_fill_manual(values=c("red", "blue"))+
scale_fill_manual(values=c("#F45E5B", "#5187FF"))
theme(axis.text.x = element_text(size=10,angle=0))+
theme_blackDisplay()
p
p <- ggplot(agg,aes(x=noise,y=p)) +
geom_bar(stat='identity',position=position_dodge(),aes(fill=k)) +
ylab("probability of\ncollective interpretation\n") +
xlab("\ncollective interpretation noise")+
labs(fill="speaker\nknowledge\naccess")+
#scale_fill_manual(values=c("red", "blue"))+
scale_fill_manual(values=c("#F45E5B", "#5187FF"))+
theme(axis.text.x = element_text(size=10,angle=0))+
theme_blackDisplay()
p
p <- ggplot(agg,aes(x=noise,y=p)) +
geom_bar(stat='identity',position=position_dodge(),aes(fill=k)) +
ylab("probability of\ncollective interpretation\n") +
xlab("\ncollective interpretation noise")+
labs(fill="speaker\nknowledge\naccess")+
#scale_fill_manual(values=c("red", "blue"))+
scale_fill_manual(values=c("orange", "cyan"))+
theme(axis.text.x = element_text(size=10,angle=0))+
theme_blackDisplay()
p
setwd("~/Documents/git/CoCoLab/collective/presentations/Berkeley_2015/")
setwd("~/Documents/git/CoCoLab/collective/presentations/2015_Berkeley/")
ggsave("model-results-sum.png")
ggsave("model-results-sum.pdf",width=10,height=7)
ggsave("model-results-sum.png",width=10,height=7)
ggsave("model-results-sum.png",width=12,height=7)
ggsave("model-results-sum.png",width=12.5,height=6.5)
p <- ggplot(agg,aes(x=noise,y=p)) +
geom_bar(stat='identity',position=position_dodge(),aes(fill=k)) +
ylab("probability of\ncollective interpretation\n") +
xlab("\ncollective interpretation noise")+
labs(fill="speaker\nknowledge\naccess")+
#scale_fill_manual(values=c("red", "blue"))+
scale_fill_manual(values=c("cyan", "orange"))+
theme(axis.text.x = element_text(size=10,angle=0))+
theme_blackDisplay()
p
setwd("~/Documents/git/CoCoLab/collective/presentations/2015_Berkeley/")
ggsave("model-results-sum.png",width=12.5,height=6.5)
setwd("~/Documents/git/CoCoLab/collective/experiments/2-corpus-based/")
sub = read.table("~/Documents/git/CoCoLab/collective/experiments/2-corpus-based/Submiterator-master/2-corpus-based-subject_information.tsv",sep="\t",header=T)
sub
d = read.table("~/Documents/git/CoCoLab/collective/experiments/2-corpus-based/Submiterator-master/2-corpus-based-trials.tsv",sep="\t",header=T)
#only native English
d <- d[d$workerid!=8&d$workerid!=20&d$workerid!=30&d$workerid!=47&d$workerid!=73,]
a = d[d$attested=="True",]
## Attested sentence analysis (collapsing over animacy)
a$sentence = paste(a$noun,a$predicate,sep=" ")
a_sent_casted = dcast(data=a, animate + sentence + predicate + noun + workerid ~ sentence_type, value.var="response",mean,na.rm=T)
a_sent_casted$collective = (a_sent_casted$coll/a_sent_casted$dist)
a_sent_casted$coll_diff = (a_sent_casted$coll-a_sent_casted$dist)
a_sent_corr = dcast(data=a, sentence ~ sentence_type, value.var="response",mean,na.rm=T)
head(a_sent_casted)
library(lme4)
library(plyr)
library(lmerTest)
library(coin)
library(ggplot2)
library(reshape2)
setwd("~/Documents/git/CoCoLab/collective/experiments/2-corpus-based/")
sub = read.table("~/Documents/git/CoCoLab/collective/experiments/2-corpus-based/Submiterator-master/2-corpus-based-subject_information.tsv",sep="\t",header=T)
sub
d = read.table("~/Documents/git/CoCoLab/collective/experiments/2-corpus-based/Submiterator-master/2-corpus-based-trials.tsv",sep="\t",header=T)
#only native English
d <- d[d$workerid!=8&d$workerid!=20&d$workerid!=30&d$workerid!=47&d$workerid!=73,]
s = read.csv("~/Documents/git/CoCoLab/collective/experiments/2-corpus-based/bnc.sentences.csv",header=T)
# counts and raw values
head(d)
table(d$predicate,d$noun)
d = d[!is.na(d$sense),]
table(d$sense,d$attested)
# unattested: 67% make sense
# attested: 95% make sense
d$madesense = 0
d[d$sense=="Yes",]$madesense = 1
s_agg = aggregate(madesense~attested+workerid,data=d,mean)
head(s_agg)
aggregate(madesense~attested,data=s_agg,mean)
s_agg = aggregate(madesense~attested+workerid,data=d,mean)
s_agg = aggregate(madesense~attested+workerid,data=d,FUN=mean)
s_agg = aggregate(madesense~attested+workerid,data=d,mean)
head(s_agg)
aggregate(madesense~attested,data=s_agg,mean)
# trim to just those sentences that make sense
d = d[!is.na(d$sense)&d$sense=="Yes",]
summary(d)
# just attested sentences
a = d[d$attested=="True",]
## Attested sentence analysis (collapsing over animacy)
a$sentence = paste(a$noun,a$predicate,sep=" ")
a_sent_casted = dcast(data=a, animate + sentence + predicate + noun + workerid ~ sentence_type, value.var="response",mean,na.rm=T)
library(lme4)
library(plyr)
library(lmerTest)
library(coin)
library(ggplot2)
library(reshape2)
s_agg = aggregate(madesense~attested+workerid,data=d,mean)
