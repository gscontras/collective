}
}
return(as.data.frame(m))
}
}
bootsSummary <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE, n_boots_samps=10) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
bootsci_high = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["97.5%"]],
bootsci_low = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["2.5%"]]
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
return(datac)
}
theme_blackDisplay <- function(base_size = 12, base_family = "Helvetica") {
require(grid)
theme(
line =               element_line(colour = "white", size = 0.5, linetype = 1,
lineend = "butt"),
rect =               element_rect(fill = "black", colour = "black", size = 0.5, linetype = 1),
text =               element_text(family = base_family, face = "plain",
colour = "white", size = base_size,
hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text =          element_text(size = 30, colour = "white"),
strip.text =         element_text(size = 30, colour = "white"),
axis.line =          element_blank(),
axis.text.x =        element_text(vjust = 1),
axis.text.y =        element_text(hjust = 1),
axis.ticks =         element_line(colour = "white", size = 0.2),
axis.title =         element_text(size=32,colour = "white"),
axis.title.x =       element_text(vjust = 1),
axis.title.y =       element_text(angle = 90),
axis.ticks.length =  unit(0.3, "lines"),
axis.ticks.margin =  unit(0.5, "lines"),
legend.background =  element_rect(colour = "black"),
legend.margin =      unit(0.2, "cm"),
legend.key =         element_rect(fill = "black", colour = "white"),
legend.key.size =    unit(1.2, "lines"),
legend.key.height =  NULL,
legend.key.width =   NULL,
legend.text =        element_text(size = 26, colour = "white"),
legend.text.align =  NULL,
legend.title =       element_text(size = 26, face = "bold", hjust = 0, colour = "white"),
legend.title.align = NULL,
legend.position =    "right",
legend.direction =   "vertical",
legend.justification = "center",
legend.box =         NULL,
panel.background =   element_rect(fill = "black", colour = NA),
panel.border =       element_rect(fill = NA, colour = "white"),
panel.grid.major =   element_line(colour = "grey20", size = 0.2),
panel.grid.minor =   element_line(colour = "grey5", size = 0.5),
panel.margin =       unit(0.25, "lines"),
strip.background =   element_rect(fill = "grey30", colour = "grey10"),
strip.text.x =       element_text(),
strip.text.y =       element_text(angle = -90),
plot.background =    element_rect(colour = "black", fill = "black"),
plot.title =         element_text(size = rel(1.2)),
plot.margin =        unit(c(1, 1, 0.5, 0.5), "lines"),
complete = TRUE
)
}
d1 = read.table("~/Dropbox/CoCoLab/CollectivePredication/Experiment/Persistence.v3/experiment_persistence.v3-master/Submiterator-master/persistence.v3-trials copy.tsv",sep="\t",header=T)
d1$workerid = paste("v1",d1$workerid,sep="")
d2 = read.table("~/Dropbox/CoCoLab/CollectivePredication/Experiment/Persistence.v3/experiment_persistence.v3-master/Submiterator-master/persistence.v3-trials.tsv",sep="\t",header=T)
d2$workerid = paste("v2",d2$workerid,sep="")
d = rbind(d1,d2)
# counts and raw values
table(d$context,d$sentence_type)
aggregate(response~context*sentence_type,d,mean)
# permutaiton tests
independence_test(response~context,data=d[d$sentence_type=="dist",])
independence_test(response~context,data=d[d$sentence_type=="coll",])
independence_test(response~sentence_type,data=d[d$context=="regular",])
independence_test(response~sentence_type,data=d[d$context=="random",])
# linear regression
d$ccontext = myCenter(d$context)
d$csentence_type = myCenter(d$sentence_type)
m = lm(response~ccontext*csentence_type+(1+csentence_type|workerid),data=d)
# plots
d_s = bootsSummary(data=d, measurevar="response", groupvars=c("context", "sentence_type"))
plot <- ggplot(d_s, aes(x=sentence_type,y=response,fill=context)) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=sentence_type, width=0.1),position=position_dodge(width=0.9))+
ylab("intended? \n")+
xlab("\n interpretation")
#+ theme_blackDisplay()
plot
graphics.off()
plot.new()
plot <- ggplot(d_s, aes(x=sentence_type,y=response,fill=context)) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=sentence_type, width=0.1),position=position_dodge(width=0.9))+
ylab("intended? \n")+
xlab("\n interpretation")
#+ theme_blackDisplay()
plot
library(lme4)
library(plyr)
library(lmerTest)
library(coin)
library(ggplot2)
myCenter <- function(x) {
if (is.numeric(x)) { return(x - mean(x)) }
if (is.factor(x)) {
x <- as.numeric(x)
return(x - mean(x))
}
if (is.data.frame(x) || is.matrix(x)) {
m <- matrix(nrow=nrow(x), ncol=ncol(x))
colnames(m) <- paste("c", colnames(x), sep="")
for (i in 1:ncol(x)) {
if (is.factor(x[,i])) {
y <- as.numeric(x[,i])
m[,i] <- y - mean(y, na.rm=T)
}
if (is.numeric(x[,i])) {
m[,i] <- x[,i] - mean(x[,i], na.rm=T)
}
}
return(as.data.frame(m))
}
}
bootsSummary <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE, n_boots_samps=10) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
bootsci_high = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["97.5%"]],
bootsci_low = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["2.5%"]]
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
return(datac)
}
theme_blackDisplay <- function(base_size = 12, base_family = "Helvetica") {
require(grid)
theme(
line =               element_line(colour = "white", size = 0.5, linetype = 1,
lineend = "butt"),
rect =               element_rect(fill = "black", colour = "black", size = 0.5, linetype = 1),
text =               element_text(family = base_family, face = "plain",
colour = "white", size = base_size,
hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text =          element_text(size = 30, colour = "white"),
strip.text =         element_text(size = 30, colour = "white"),
axis.line =          element_blank(),
axis.text.x =        element_text(vjust = 1),
axis.text.y =        element_text(hjust = 1),
axis.ticks =         element_line(colour = "white", size = 0.2),
axis.title =         element_text(size=32,colour = "white"),
axis.title.x =       element_text(vjust = 1),
axis.title.y =       element_text(angle = 90),
axis.ticks.length =  unit(0.3, "lines"),
axis.ticks.margin =  unit(0.5, "lines"),
legend.background =  element_rect(colour = "black"),
legend.margin =      unit(0.2, "cm"),
legend.key =         element_rect(fill = "black", colour = "white"),
legend.key.size =    unit(1.2, "lines"),
legend.key.height =  NULL,
legend.key.width =   NULL,
legend.text =        element_text(size = 26, colour = "white"),
legend.text.align =  NULL,
legend.title =       element_text(size = 26, face = "bold", hjust = 0, colour = "white"),
legend.title.align = NULL,
legend.position =    "right",
legend.direction =   "vertical",
legend.justification = "center",
legend.box =         NULL,
panel.background =   element_rect(fill = "black", colour = NA),
panel.border =       element_rect(fill = NA, colour = "white"),
panel.grid.major =   element_line(colour = "grey20", size = 0.2),
panel.grid.minor =   element_line(colour = "grey5", size = 0.5),
panel.margin =       unit(0.25, "lines"),
strip.background =   element_rect(fill = "grey30", colour = "grey10"),
strip.text.x =       element_text(),
strip.text.y =       element_text(angle = -90),
plot.background =    element_rect(colour = "black", fill = "black"),
plot.title =         element_text(size = rel(1.2)),
plot.margin =        unit(c(1, 1, 0.5, 0.5), "lines"),
complete = TRUE
)
}
d1 = read.table("~/Dropbox/CoCoLab/CollectivePredication/Experiment/Persistence.v3/experiment_persistence.v3-master/Submiterator-master/persistence.v3-trials copy.tsv",sep="\t",header=T)
d1$workerid = paste("v1",d1$workerid,sep="")
d2 = read.table("~/Dropbox/CoCoLab/CollectivePredication/Experiment/Persistence.v3/experiment_persistence.v3-master/Submiterator-master/persistence.v3-trials.tsv",sep="\t",header=T)
d2$workerid = paste("v2",d2$workerid,sep="")
d = rbind(d1,d2)
# counts and raw values
table(d$context,d$sentence_type)
aggregate(response~context*sentence_type,d,mean)
# permutaiton tests
independence_test(response~context,data=d[d$sentence_type=="dist",])
independence_test(response~context,data=d[d$sentence_type=="coll",])
independence_test(response~sentence_type,data=d[d$context=="regular",])
independence_test(response~sentence_type,data=d[d$context=="random",])
# linear regression
d$ccontext = myCenter(d$context)
d$csentence_type = myCenter(d$sentence_type)
m = lm(response~ccontext*csentence_type+(1+csentence_type|workerid),data=d)
# plots
d_s = bootsSummary(data=d, measurevar="response", groupvars=c("context", "sentence_type"))
plot <- ggplot(d_s, aes(x=sentence_type,y=response,fill=context)) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=sentence_type, width=0.1),position=position_dodge(width=0.9))+
ylab("intended? \n")+
xlab("\n interpretation")
#+ theme_blackDisplay()
plot
sd(c(816,1088,918))
sd(c(476,392,252))
library(lme4)
library(plyr)
library(lmerTest)
library(coin)
library(ggplot2)
myCenter <- function(x) {
if (is.numeric(x)) { return(x - mean(x)) }
if (is.factor(x)) {
x <- as.numeric(x)
return(x - mean(x))
}
if (is.data.frame(x) || is.matrix(x)) {
m <- matrix(nrow=nrow(x), ncol=ncol(x))
colnames(m) <- paste("c", colnames(x), sep="")
for (i in 1:ncol(x)) {
if (is.factor(x[,i])) {
y <- as.numeric(x[,i])
m[,i] <- y - mean(y, na.rm=T)
}
if (is.numeric(x[,i])) {
m[,i] <- x[,i] - mean(x[,i], na.rm=T)
}
}
return(as.data.frame(m))
}
}
bootsSummary <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE, n_boots_samps=10) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
bootsci_high = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["97.5%"]],
bootsci_low = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["2.5%"]]
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
return(datac)
}
theme_blackDisplay <- function(base_size = 12, base_family = "Helvetica") {
require(grid)
theme(
line =               element_line(colour = "white", size = 0.5, linetype = 1,
lineend = "butt"),
rect =               element_rect(fill = "black", colour = "black", size = 0.5, linetype = 1),
text =               element_text(family = base_family, face = "plain",
colour = "white", size = base_size,
hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text =          element_text(size = 30, colour = "white"),
strip.text =         element_text(size = 30, colour = "white"),
axis.line =          element_blank(),
axis.text.x =        element_text(vjust = 1),
axis.text.y =        element_text(hjust = 1),
axis.ticks =         element_line(colour = "white", size = 0.2),
axis.title =         element_text(size=32,colour = "white"),
axis.title.x =       element_text(vjust = 1),
axis.title.y =       element_text(angle = 90),
axis.ticks.length =  unit(0.3, "lines"),
axis.ticks.margin =  unit(0.5, "lines"),
legend.background =  element_rect(colour = "black"),
legend.margin =      unit(0.2, "cm"),
legend.key =         element_rect(fill = "black", colour = "white"),
legend.key.size =    unit(1.2, "lines"),
legend.key.height =  NULL,
legend.key.width =   NULL,
legend.text =        element_text(size = 26, colour = "white"),
legend.text.align =  NULL,
legend.title =       element_text(size = 26, face = "bold", hjust = 0, colour = "white"),
legend.title.align = NULL,
legend.position =    "right",
legend.direction =   "vertical",
legend.justification = "center",
legend.box =         NULL,
panel.background =   element_rect(fill = "black", colour = NA),
panel.border =       element_rect(fill = NA, colour = "white"),
panel.grid.major =   element_line(colour = "grey20", size = 0.2),
panel.grid.minor =   element_line(colour = "grey5", size = 0.5),
panel.margin =       unit(0.25, "lines"),
strip.background =   element_rect(fill = "grey30", colour = "grey10"),
strip.text.x =       element_text(),
strip.text.y =       element_text(angle = -90),
plot.background =    element_rect(colour = "black", fill = "black"),
plot.title =         element_text(size = rel(1.2)),
plot.margin =        unit(c(1, 1, 0.5, 0.5), "lines"),
complete = TRUE
)
}
d1 = read.table("~/Dropbox/CoCoLab/CollectivePredication/Experiment/Persistence.v3/experiment_persistence.v3-master/Submiterator-master/persistence.v3-trials copy.tsv",sep="\t",header=T)
d1$workerid = paste("v1",d1$workerid,sep="")
d2 = read.table("~/Dropbox/CoCoLab/CollectivePredication/Experiment/Persistence.v3/experiment_persistence.v3-master/Submiterator-master/persistence.v3-trials.tsv",sep="\t",header=T)
d2$workerid = paste("v2",d2$workerid,sep="")
d = rbind(d1,d2)
# counts and raw values
table(d$context,d$sentence_type)
aggregate(response~context*sentence_type,d,mean)
# permutaiton tests
independence_test(response~context,data=d[d$sentence_type=="dist",])
independence_test(response~context,data=d[d$sentence_type=="coll",])
independence_test(response~sentence_type,data=d[d$context=="regular",])
independence_test(response~sentence_type,data=d[d$context=="random",])
# linear regression
d$ccontext = myCenter(d$context)
d$csentence_type = myCenter(d$sentence_type)
m = lm(response~ccontext*csentence_type+(1+csentence_type|workerid),data=d)
# plots
d_s = bootsSummary(data=d, measurevar="response", groupvars=c("context", "sentence_type"))
plot <- ggplot(d_s, aes(x=sentence_type,y=response,fill=context)) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=sentence_type, width=0.1),position=position_dodge(width=0.9))+
ylab("intended? \n")+
xlab("\n interpretation")
#+ theme_blackDisplay()
plot
d_s
library(lme4)
library(plyr)
library(lmerTest)
library(coin)
library(ggplot2)
myCenter <- function(x) {
if (is.numeric(x)) { return(x - mean(x)) }
if (is.factor(x)) {
x <- as.numeric(x)
return(x - mean(x))
}
if (is.data.frame(x) || is.matrix(x)) {
m <- matrix(nrow=nrow(x), ncol=ncol(x))
colnames(m) <- paste("c", colnames(x), sep="")
for (i in 1:ncol(x)) {
if (is.factor(x[,i])) {
y <- as.numeric(x[,i])
m[,i] <- y - mean(y, na.rm=T)
}
if (is.numeric(x[,i])) {
m[,i] <- x[,i] - mean(x[,i], na.rm=T)
}
}
return(as.data.frame(m))
}
}
bootsSummary <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE, n_boots_samps=10) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
bootsci_high = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["97.5%"]],
bootsci_low = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["2.5%"]]
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
return(datac)
}
theme_blackDisplay <- function(base_size = 12, base_family = "Helvetica") {
require(grid)
theme(
line =               element_line(colour = "white", size = 0.5, linetype = 1,
lineend = "butt"),
rect =               element_rect(fill = "black", colour = "black", size = 0.5, linetype = 1),
text =               element_text(family = base_family, face = "plain",
colour = "white", size = base_size,
hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text =          element_text(size = 30, colour = "white"),
strip.text =         element_text(size = 30, colour = "white"),
axis.line =          element_blank(),
axis.text.x =        element_text(vjust = 1),
axis.text.y =        element_text(hjust = 1),
axis.ticks =         element_line(colour = "white", size = 0.2),
axis.title =         element_text(size=32,colour = "white"),
axis.title.x =       element_text(vjust = 1),
axis.title.y =       element_text(angle = 90),
axis.ticks.length =  unit(0.3, "lines"),
axis.ticks.margin =  unit(0.5, "lines"),
legend.background =  element_rect(colour = "black"),
legend.margin =      unit(0.2, "cm"),
legend.key =         element_rect(fill = "black", colour = "white"),
legend.key.size =    unit(1.2, "lines"),
legend.key.height =  NULL,
legend.key.width =   NULL,
legend.text =        element_text(size = 26, colour = "white"),
legend.text.align =  NULL,
legend.title =       element_text(size = 26, face = "bold", hjust = 0, colour = "white"),
legend.title.align = NULL,
legend.position =    "right",
legend.direction =   "vertical",
legend.justification = "center",
legend.box =         NULL,
panel.background =   element_rect(fill = "black", colour = NA),
panel.border =       element_rect(fill = NA, colour = "white"),
panel.grid.major =   element_line(colour = "grey20", size = 0.2),
panel.grid.minor =   element_line(colour = "grey5", size = 0.5),
panel.margin =       unit(0.25, "lines"),
strip.background =   element_rect(fill = "grey30", colour = "grey10"),
strip.text.x =       element_text(),
strip.text.y =       element_text(angle = -90),
plot.background =    element_rect(colour = "black", fill = "black"),
plot.title =         element_text(size = rel(1.2)),
plot.margin =        unit(c(1, 1, 0.5, 0.5), "lines"),
complete = TRUE
)
}
d1 = read.table("~/Dropbox/CoCoLab/CollectivePredication/Experiment/Persistence.v3/experiment_persistence.v3-master/Submiterator-master/persistence.v3-trials copy.tsv",sep="\t",header=T)
d1$workerid = paste("v1",d1$workerid,sep="")
d2 = read.table("~/Dropbox/CoCoLab/CollectivePredication/Experiment/Persistence.v3/experiment_persistence.v3-master/Submiterator-master/persistence.v3-trials.tsv",sep="\t",header=T)
d2$workerid = paste("v2",d2$workerid,sep="")
d = rbind(d1,d2)
# counts and raw values
table(d$context,d$sentence_type)
aggregate(response~context*sentence_type,d,mean)
# permutaiton tests
independence_test(response~context,data=d[d$sentence_type=="dist",])
independence_test(response~context,data=d[d$sentence_type=="coll",])
independence_test(response~sentence_type,data=d[d$context=="regular",])
independence_test(response~sentence_type,data=d[d$context=="random",])
# linear regression
d$ccontext = myCenter(d$context)
d$csentence_type = myCenter(d$sentence_type)
m = lm(response~ccontext*csentence_type+(1+csentence_type|workerid),data=d)
# plots
d_s = bootsSummary(data=d, measurevar="response", groupvars=c("context", "sentence_type"))
plot <- ggplot(d_s, aes(x=sentence_type,y=response,fill=context)) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=sentence_type, width=0.1),position=position_dodge(width=0.9))+
ylab("intended? \n")+
xlab("\n interpretation")
#+ theme_blackDisplay()
plot
m = lmer(response~ccontext*csentence_type+(1+csentence_type|workerid),data=d)
m = lmer(response~ccontext*csentence_type+(1|workerid),data=d)
m
summary(m)
