// error function
var erf = function(x) {
  var a1 =  0.254829592;
  var a2 = -0.284496736;
  var a3 =  1.421413741;
  var a4 = -1.453152027;
  var a5 =  1.061405429;
  var p  =  0.3275911;
  var sign = x < 0 ? -1 : 1
  var z = Math.abs(x);
  var t = 1.0/(1.0 + p*z);
  var y = 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*Math.exp(-z*z);
  var answer = sign*y
  return answer
}

// get a sublist from a list
var sublist = function(xs, n) {
  if (n <= 0 || xs.length == 0) {
    return [];
  }
  var x = uniformDraw(xs);
  return append([x], sublist(_.without(xs, x), n-1) );
}

// check array identity
var arraysEqual = function(a1,a2) {
  return JSON.stringify(a1)==JSON.stringify(a2);
}

// get ERP probabilities
var erpProbs = function(ERP,support) {
  var scores = function(val) {
    return Math.exp(ERP.score(val))
  }
  return map(scores,support)
}

// KL divergence
var KL = function(P,Q) {
  var diverge = function(xp,xq) {
    return xp == 0 ? 0 : (xp * Math.log(xp / xq) )
  }
  return sum(map2(diverge,P,Q))
}


var pluralPredication = function(numberObjects,
                                  collectiveNoise,
                                  thingSaid
                                 ) {

  var utterances = ["null",
                    "ambiguous-pos",
                    "each-pos",
                    "together-pos"
                   ];

  // ambiguous utterance twice as likely
  var utterancePrior = function() {
    return categorical([3,2,1,1],utterances)
  };

  var objects = [2,3,4]

  var objectPrior = function() {
    uniformDraw(objects);
  }

  var statePrior = function(nObjLeft,stateSoFar) {
    var stateSoFar = stateSoFar == undefined ? [] : stateSoFar
    if (nObjLeft == 0) {
      return stateSoFar
    } else {
      var newObj = objectPrior()
      var newState = stateSoFar.concat([newObj])
      return statePrior(nObjLeft - 1,newState)
    }
  }

  // enumerate through possible arrangements
  var collState = cache(function(state,noise) {
    return Infer(
      {method: "enumerate"},
      function() {
        var n = binomial(noise,(state.length-1)) + 1; // subset size
        var arrangement = sublist(state,n);
        var collState = sum(arrangement) 
        return(collState)
      });
  });

  // threshold priors
  var distThetaPrior = function(){return objectPrior()};  
  var collThetaPrior = function(){return uniformDraw([2,4,6,8,10,12])};

  // x > theta
  var collInterpretationPos = function(state, collTheta, noise) {
    var collState = sample(collState(state,noise))
    return collState >= collTheta ? flip(0.99) : flip(0.1)
  }
  var distInterpretationPos = function(state, distTheta) {
    return all(function(x){x >= distTheta}, state) ? flip(0.99) : flip(0.01)
  }

  // meaning function
  var meaning = function(utt,state,distThetaPos,collThetaPos,isCollective,noise) {
    return  utt == "null" ? true :
    utt == "each-pos" ? distInterpretationPos(state,distThetaPos) :
    utt == "together-pos" ? collInterpretationPos(state,collThetaPos,noise) :
    isCollective ? collInterpretationPos(state,collThetaPos,noise) :
    distInterpretationPos(state,distThetaPos)
  }

  var alpha = 7

  var literal = cache(function(utterance,distThetaPos,collThetaPos,isCollective) {
    Infer({method:"enumerate"}, function(){
      var state = statePrior(numberObjects);
      var noise = collectiveNoise
      condition(meaning(utterance,state,distThetaPos,collThetaPos,isCollective,noise));
      return state;
    })
  });

  var speakerBelief = cache(function(state,speakerKnows) {
    Infer({method:"enumerate"}, function(){
      var obs = function(s) {
        return speakerKnows ? s : sum(s) 
      }
      var bState = statePrior(numberObjects)
      condition(arraysEqual(obs(bState),obs(state)))
      return bState
    })
  })

  var speaker = cache(function(state,distThetaPos,collThetaPos,isCollective,speakerKnows) {
    Infer({method:"enumerate"}, function(){
      var utterance = utterancePrior()
      var bDist = speakerBelief(state,speakerKnows)
      var lDist = literal(utterance,distThetaPos,collThetaPos,isCollective)
      factor(-1 *
             KL(erpProbs(bDist,bDist.support()),
                erpProbs(lDist,bDist.support())
               ))
      return utterance
    })
  });

  var listener = cache(function(utterance,speakerKnows) {
    Infer({method:"enumerate"}, function(){
      var state = statePrior(numberObjects);
      var isCollective = flip(0.8)
      var distThetaPos = distThetaPrior();
      var collThetaPos = collThetaPrior();
      factor(alpha * 
             speaker(state,distThetaPos,collThetaPos,isCollective,speakerKnows).score(utterance) 
            );
      return isCollective
    });
  });

  return ["full knowledge",
          listener(thingSaid,true),
          "partial knowledge",
          listener(thingSaid,false)
         ]
}

print(pluralPredication(3,.95,"ambiguous-pos"))
print(pluralPredication(3,.85,"ambiguous-pos"))
print(pluralPredication(3,.75,"ambiguous-pos"))


