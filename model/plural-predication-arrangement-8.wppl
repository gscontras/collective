//// helper functions

// get a sublist from a list
var sublist = function(xs, n) {
      if (n <= 0 || xs.length == 0) {
        return [];
      }
      var x = uniformDraw(xs);
      return append([x], sublist(_.without(xs, x), n-1) );
    }

var getMaxOfArray = function(numArray) {
  return Math.max.apply(null, numArray);
}

// check array identity
var arraysEqual = function(a1,a2) {
  return JSON.stringify(a1)==JSON.stringify(a2);
}

// get ERP probabilities
var erpProbs = function(ERP,support) {
  var scores = function(val) {
    return Math.exp(ERP.score(val))
  }
  return map(scores,support)
}

// KL divergence
var KL = function(P,Q) {
  var diverge = function(xp,xq) {
    return xp == 0 ? 0 : (xp * Math.log(xp / xq) )
  }
  return sum(map2(diverge,P,Q))
}


//// model wrapper
var pluralPredication = function(numberObjects,
                                  collectiveNoise,
                                  thingSaid
                                 ) {

  // var pluralPredication = function(numberObjects,
  //                                   collectiveNoise,
  //                                   knowledge,
  //                                   plurality
  //                                  ) {  

  var utterances = ["null",
                    "ambiguous-pos",
                    "each-pos",
                    "together-pos",
                    // "ambiguous-neg",
                    // "each-neg",
                    // "together-neg"
                   ];

  var cost = function(utt) {
    return  utt == "each-pos" ? 2 :
    utt == "together-pos" ? 2 :
    utt == "ambiguous-pos" ? 1 : 
    utt == "each-neg" ? 2 :
    utt == "together-neg" ? 2 :
    utt == "ambiguous-neg" ? 1 : 
    0
  }

  var utterancePrior = function() {
    return utterances[discrete(map(function(u) {
      return Math.exp(-cost(u));
    }, utterances))];
  };

  // var objects = [
  //                 25, 25, 30, 40, 50, 50, 60, 20, // Set 1
  //                 40, 40, 30, 60, 25, 20, 30, 15, // Set 2
  //                 40, 55, 15, 40, 30, 30, 20, 10, // Set 3
  //                 40, 40, 10, 60, 20, 20, 30, 20  // Set 4
  //               ]
  var objects = [ // no repeats
                  10,15,20,25,30,40,50,55,60
                ]


  var objectPrior = function() {
    uniformDraw(objects);
  }

  var statePrior = function(nObjLeft,stateSoFar) {
    var stateSoFar = stateSoFar == undefined ? [] : stateSoFar
    if (nObjLeft == 0) {
      return stateSoFar
    } else {
      var newObj = objectPrior()
      var newState = stateSoFar.concat([newObj])
      return sort(statePrior(nObjLeft - 1,newState)) // sorted states
    }
  }

  var collStateCheckPos = cache(function(state,noise,theta) {
    return Infer(
      {method: "enumerate"},
      function() {
      var n = binomial(noise,(state.length-1)) + 1; // subset size
      var arrangement = sublist(state,n);
      var collState = sum(arrangement) > getMaxOfArray(state) ? sum(arrangement) : getMaxOfArray(state);
      return(collState>theta)
    });
  });

  var collStateCheckNeg = cache(function(state,noise,theta) {
    return Infer(
      {method: "enumerate"},
      function() {
      var n = binomial(noise,(state.length-1)) + 1; // subset size
      var arrangement = sublist(state,n);
      var collState = sum(arrangement) > getMaxOfArray(state) ? sum(arrangement) : getMaxOfArray(state);
      return(collState<theta)
    });
  });

  var collThetas_support = cache(function() {
    return Infer(
      {method: "enumerate"},
      function() {
        var collState = statePrior(numberObjects)
        return sum(collState)
      });
  });
  var collThetas = function() {
    return uniformDraw(collThetas_support().support())
  }

  // x > theta
  var collInterpretationPos = function(state, collTheta, noise) {
    var weight = Math.exp(collStateCheckPos(state,noise,collTheta).score(true));
    return weight == 0 ? flip(0.01) : weight == 1 ? flip(0.99) : flip(weight)
  }
  var distInterpretationPos = function(state, distTheta) {
    return all(function(x){x > distTheta}, state) ? flip(0.99) : flip(0.01)
  }

  // x < theta
  var collInterpretationNeg = function(state, collTheta, noise) {
    var weight = Math.exp(collStateCheckNeg(state,noise,collTheta).score(true));
    return weight == 0 ? flip(0.01) : weight == 1 ? flip(0.99) : flip(weight)
  }
  var distInterpretationNeg = function(state, distTheta) {
    return all(function(x){x < distTheta}, state) ? flip(0.99) : flip(0.01)
  }

  var meaning = function(utt,state,distThetaPos,collThetaPos,distThetaNeg,collThetaNeg,isCollective,noise) {
    return  utt == "each-pos" ? distInterpretationPos(state,distThetaPos) :
    utt == "together-pos" ? collInterpretationPos(state,collThetaPos,noise) :
    utt == "ambiguous-pos" ? 
      isCollective ? collInterpretationPos(state,collThetaPos,noise) :
    distInterpretationPos(state,distThetaPos) : 
    utt == "each-neg" ? distInterpretationNeg(state,distThetaNeg) :
    utt == "together-neg" ? collInterpretationNeg(state,collThetaNeg,noise) :
    utt == "ambiguous-neg" ? 
      isCollective ? collInterpretationNeg(state,collThetaNeg,noise) :
    distInterpretationNeg(state,distThetaNeg) :
    true
  }

  var alpha = 7

  var literal = cache(function(utterance,distThetaPos,collThetaPos,distThetaNeg,collThetaNeg,isCollective) {
    return Infer(
      {method: "enumerate"},
      function() {
      var noise = collectiveNoise
      var state = statePrior(numberObjects);
      condition(meaning(utterance,state,distThetaPos,collThetaPos,distThetaNeg,collThetaNeg,isCollective,noise));
      return state;
    })
  });

  var speakerBelief = cache(function(state,speakerKnows) {
    return Infer(
      {method: "enumerate"},
      function() {
      var obs = function(s) {
        return speakerKnows ? s : sum(s) 
      }
      var bState = statePrior(numberObjects)
      condition(arraysEqual(obs(bState),obs(state)))
      return bState
    })
  })

  var speaker = cache(function(state,distThetaPos,collThetaPos,distThetaNeg,collThetaNeg,isCollective,speakerKnows) {
    return Infer(
      {method: "enumerate"},
      function() {
      var utterance = utterancePrior()
      var bDist = speakerBelief(state,speakerKnows)
      var lDist = literal(utterance,distThetaPos,collThetaPos,distThetaNeg,collThetaNeg,isCollective)
      factor(alpha * (-1 *
                      KL(erpProbs(bDist,bDist.support()),
                         erpProbs(lDist,bDist.support())
                        )))
      return utterance
    })
  });

  var listener = cache(function(utterance,speakerKnows) {
    return Infer(
      {method: "enumerate"},
      function() {
      var state = statePrior(numberObjects);
      var isCollective = flip(0.5)
      var distThetaPos = objectPrior();
      var collThetaPos = collThetas();
      var distThetaNeg = 1 // neg theta irrelevant
      var collThetaNeg = 1 // neg theta irrelevant
      // var distThetaNeg = objectPrior();
      // var collThetaNeg = collThetas();
      factor(
        speaker(state,distThetaPos,collThetaPos,distThetaNeg,collThetaNeg,isCollective,speakerKnows).score(utterance) 
      );
      return isCollective
    });
  });

  var speaker2 = cache(function(state,speakerKnows) {
    return Infer(
      {method: "enumerate"},
      function() {
      var utterance = utterancePrior()
      var bDist = speakerBelief(state,speakerKnows)
      factor(
        // listener(utterance,speakerKnows).score(sample(bDist))
        listener(utterance,speakerKnows).score(state)
      );
      return utterance
    }) 
  })

  return {"partial knowledge":
          listener(thingSaid,false),
          "full knowledge":
          listener(thingSaid,true)}

  // return speaker2(plurality,knowledge)
}

var noise_from_R = my_data[0].noise
var number_of_objects = my_data[0].nobjects
var thing_said = my_data[0].utterance

pluralPredication(number_of_objects,noise_from_R,thing_said)

// console.log(pluralPredication(3,.99,"ambiguous-pos"))
// console.log(pluralPredication(3,.75,"ambiguous-pos"))
// console.log(pluralPredication(3,.5,"ambiguous-pos"))
// console.log(pluralPredication(3,.25,"ambiguous-pos"))


// console.log(pluralPredication(2,.99,"ambiguous-neg"))
// console.log(pluralPredication(2,.75,"ambiguous-neg"))
// console.log(pluralPredication(2,.5,"ambiguous-neg"))
// console.log(pluralPredication(2,.25,"ambiguous-neg"))

// console.log(pluralPredication(3,.99,true,[2,4,4]))
// console.log("Stop")
// console.log(pluralPredication(3,.99,false,[2,4,4]))

// console.log("Stop")

// console.log(pluralPredication(3,.79,true,[2,4,4]))
// console.log("Stop")
// console.log(pluralPredication(3,.79,false,[2,4,4]))


// console.log(pluralPredication(3,"no","ambiguous-neg"))

// console.log(pluralPredication(3,"low","ambiguous-neg"))

// console.log(pluralPredication(3,"mid","ambiguous-neg"))

// console.log(pluralPredication(3,"high","ambiguous-neg"))

